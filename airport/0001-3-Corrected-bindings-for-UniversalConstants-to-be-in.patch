From 52252198f75517415ed3acaf5e3813aa09038fa2 Mon Sep 17 00:00:00 2001
From: 01es <oles.hodych@gmail.com>
Date: Fri, 18 Dec 2020 18:44:08 +1100
Subject: [PATCH] #3 Corrected bindings for UniversalConstants to be in line
 with the lates TG changes.

---
 .../helsinki/ioc/ApplicationServerModule.java | 29 ++------
 .../test_config/AbstractDaoTestCase.java      |  9 ++-
 .../DaoDomainDrivenTestCaseConfiguration.java | 18 ++---
 .../UniversalConstantsForTesting.java         | 67 -------------------
 .../dev_mod/util/DataPopulationConfig.java    | 11 +--
 .../ioc/WebApplicationServerModule.java       |  4 +-
 6 files changed, 30 insertions(+), 108 deletions(-)
 delete mode 100644 airport/airport-dao/src/test/java/helsinki/test_config/UniversalConstantsForTesting.java

diff --git a/airport/airport-dao/src/main/java/helsinki/ioc/ApplicationServerModule.java b/airport/airport-dao/src/main/java/helsinki/ioc/ApplicationServerModule.java
index 2ad49cd..ec85e9d 100644
--- a/airport/airport-dao/src/main/java/helsinki/ioc/ApplicationServerModule.java
+++ b/airport/airport-dao/src/main/java/helsinki/ioc/ApplicationServerModule.java
@@ -33,6 +33,7 @@ import ua.com.fielden.platform.security.user.IUserProvider;
 import ua.com.fielden.platform.security.user.impl.DefaultAuthenticationModel;
 import ua.com.fielden.platform.security.user.impl.ThreadLocalUserProvider;
 import ua.com.fielden.platform.serialisation.api.ISerialisationClassProvider;
+import ua.com.fielden.platform.utils.IDates;
 import ua.com.fielden.platform.utils.IUniversalConstants;
 import ua.com.fielden.platform.web.annotations.AppUri;
 
@@ -46,6 +47,7 @@ import ua.com.fielden.platform.web.annotations.AppUri;
  */
 public class ApplicationServerModule extends BasicWebServerModule {
     private final Class<? extends IUniversalConstants> universalConstantsType;
+    private final Class<? extends IDates> datesImplType;
     private final List<Class<? extends AbstractEntity<?>>> domainTypes;
 
     /**
@@ -68,32 +70,14 @@ public class ApplicationServerModule extends BasicWebServerModule {
             final Class<? extends IFilter> automaticDataFilterType, //
             final Class<? extends IAuthorisationModel> authorisationModelType,
             final Class<? extends IUniversalConstants> universalConstantsType,//
+            final Class<? extends IDates> datesImplType,
             final Properties props) throws Exception {
         super(defaultHibernateTypes, applicationDomainProvider, serialisationClassProviderType, automaticDataFilterType, authorisationModelType, null, props);
         this.universalConstantsType = universalConstantsType;
+        this.datesImplType = datesImplType;
         this.domainTypes = domainTypes;
     }
 
-    /**
-     * An argument list reduced version of the above constructor, where <code>universalConstantsType</code> is specified as <code>null</code>.
-     *
-     * @param defaultHibernateTypes
-     * @param applicationEntityTypes
-     * @param domainTypes
-     * @param serialisationClassProviderType
-     * @param automaticDataFilterType
-     * @param props
-     * @throws Exception
-     */
-    public ApplicationServerModule(final Map<Class, Class> defaultHibernateTypes, //
-            final IApplicationDomainProvider applicationDomainProvider, final List<Class<? extends AbstractEntity<?>>> domainTypes, //
-            final Class<? extends ISerialisationClassProvider> serialisationClassProviderType, //
-            final Class<? extends IFilter> automaticDataFilterType, //
-            final Class<? extends IAuthorisationModel> authorisationModelType,
-            final Properties props) throws Exception {
-        this(defaultHibernateTypes, applicationDomainProvider, domainTypes, serialisationClassProviderType, automaticDataFilterType, authorisationModelType, null, props);
-    }
-
     @Override
     protected void configure() {
         super.configure();
@@ -103,9 +87,8 @@ public class ApplicationServerModule extends BasicWebServerModule {
         bind(IAuthenticationModel.class).to(DefaultAuthenticationModel.class).in(Scopes.SINGLETON);
         bind(ISecurityTokenNodeTransformation.class).to(SecurityTokenNodeTransformation.class);
 
-        if (universalConstantsType != null) {
-            bind(IUniversalConstants.class).to(universalConstantsType).in(Scopes.SINGLETON);
-        }
+        bind(IDates.class).to(datesImplType).in(Scopes.SINGLETON);
+        bind(IUniversalConstants.class).to(universalConstantsType).in(Scopes.SINGLETON);
         
         // dynamically bind DAO implementations for all companion objects
         for (final Class<? extends AbstractEntity<?>> entityType : domainTypes) {
diff --git a/airport/airport-dao/src/test/java/helsinki/test_config/AbstractDaoTestCase.java b/airport/airport-dao/src/test/java/helsinki/test_config/AbstractDaoTestCase.java
index 3d8d3bc..bc9889d 100644
--- a/airport/airport-dao/src/test/java/helsinki/test_config/AbstractDaoTestCase.java
+++ b/airport/airport-dao/src/test/java/helsinki/test_config/AbstractDaoTestCase.java
@@ -5,14 +5,13 @@ import java.util.List;
 import org.joda.time.DateTime;
 import org.junit.runner.RunWith;
 
+import helsinki.config.ApplicationDomain;
+import helsinki.personnel.Person;
 import ua.com.fielden.platform.entity.AbstractEntity;
+import ua.com.fielden.platform.security.user.User;
 import ua.com.fielden.platform.test.AbstractDomainDrivenTestCase;
+import ua.com.fielden.platform.test.ioc.UniversalConstantsForTesting;
 import ua.com.fielden.platform.utils.IUniversalConstants;
-import ua.com.fielden.platform.security.user.User;
-
-import helsinki.config.ApplicationDomain;
-import helsinki.personnel.Person;
-import helsinki.test_config.UniversalConstantsForTesting;
 
 /**
  * This calss should be used as the base type for all domain-driven test cases. 
diff --git a/airport/airport-dao/src/test/java/helsinki/test_config/DaoDomainDrivenTestCaseConfiguration.java b/airport/airport-dao/src/test/java/helsinki/test_config/DaoDomainDrivenTestCaseConfiguration.java
index ad4bbf4..9e05451 100644
--- a/airport/airport-dao/src/test/java/helsinki/test_config/DaoDomainDrivenTestCaseConfiguration.java
+++ b/airport/airport-dao/src/test/java/helsinki/test_config/DaoDomainDrivenTestCaseConfiguration.java
@@ -2,6 +2,13 @@ package helsinki.test_config;
 
 import java.util.Properties;
 
+import com.google.inject.Injector;
+
+import helsinki.config.ApplicationDomain;
+import helsinki.dbsetup.HibernateSetup;
+import helsinki.filter.NoDataFilter;
+import helsinki.ioc.ApplicationServerModule;
+import helsinki.serialisation.SerialisationClassProvider;
 import ua.com.fielden.platform.entity.factory.EntityFactory;
 import ua.com.fielden.platform.entity.query.IdOnlyProxiedEntityTypeCache;
 import ua.com.fielden.platform.entity.query.metadata.DomainMetadata;
@@ -10,14 +17,8 @@ import ua.com.fielden.platform.ioc.NewUserNotifierMockBindingModule;
 import ua.com.fielden.platform.security.NoAuthorisation;
 import ua.com.fielden.platform.test.DbDrivenTestCase;
 import ua.com.fielden.platform.test.IDomainDrivenTestCaseConfiguration;
-
-import com.google.inject.Injector;
-
-import helsinki.config.ApplicationDomain;
-import helsinki.dbsetup.HibernateSetup;
-import helsinki.filter.NoDataFilter;
-import helsinki.ioc.ApplicationServerModule;
-import helsinki.serialisation.SerialisationClassProvider;
+import ua.com.fielden.platform.test.ioc.DatesForTesting;
+import ua.com.fielden.platform.test.ioc.UniversalConstantsForTesting;
 
 /**
  * Provides implementation of {@link IDomainDrivenTestCaseConfiguration} for testing purposes, which is mainly related to construction of appropriate IoC modules.
@@ -61,6 +62,7 @@ public final class DaoDomainDrivenTestCaseConfiguration implements IDomainDriven
                     NoDataFilter.class,
                     NoAuthorisation.class,
                     UniversalConstantsForTesting.class,
+                    DatesForTesting.class,
                     props);
     
     	    injector = new ApplicationInjectorFactory()
diff --git a/airport/airport-dao/src/test/java/helsinki/test_config/UniversalConstantsForTesting.java b/airport/airport-dao/src/test/java/helsinki/test_config/UniversalConstantsForTesting.java
deleted file mode 100644
index 772c9aa..0000000
--- a/airport/airport-dao/src/test/java/helsinki/test_config/UniversalConstantsForTesting.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package helsinki.test_config;
-
-import java.util.Locale;
-
-import org.joda.time.DateTime;
-
-import com.google.inject.Inject;
-import com.google.inject.name.Named;
-
-import ua.com.fielden.platform.utils.IUniversalConstants;
-
-/**
- * A convenient implementation of the {@link IUniversalConstants} contract to provide flexible notion of the <code>now</code> for unit tests. 
- * 
- * @author Generated
- *
- */
-public class UniversalConstantsForTesting implements IUniversalConstants {
-
-    private DateTime now;
-    private final String appName;
-    private final String smtpServer;
-    private final String fromEmailAddress;
-
-    @Inject
-    public UniversalConstantsForTesting(
-            final @Named("app.name") String appName,
-            final @Named("email.smtp") String smtpServer,
-            final @Named("email.fromAddress") String fromEmailAddress) {
-        this.appName = appName;
-        this.smtpServer = smtpServer;
-        this.fromEmailAddress = fromEmailAddress;
-    }
-
-    @Override
-    public DateTime now() {
-        return now;
-    }
-
-    @Override
-    public Locale locale() {
-        return Locale.getDefault();
-    }
-
-    public DateTime getNow() {
-        return now;
-    }
-
-    public void setNow(final DateTime now) {
-        this.now = now;
-    }
-
-    @Override
-    public String appName() {
-        return appName;
-    }
-
-    @Override
-    public String smtpServer() {
-        return smtpServer;
-    }
-
-    @Override
-    public String fromEmailAddress() {
-        return fromEmailAddress;
-    }
-}
diff --git a/airport/airport-web-server/src/main/java/helsinki/dev_mod/util/DataPopulationConfig.java b/airport/airport-web-server/src/main/java/helsinki/dev_mod/util/DataPopulationConfig.java
index e4403b8..6587d76 100644
--- a/airport/airport-web-server/src/main/java/helsinki/dev_mod/util/DataPopulationConfig.java
+++ b/airport/airport-web-server/src/main/java/helsinki/dev_mod/util/DataPopulationConfig.java
@@ -2,22 +2,23 @@ package helsinki.dev_mod.util;
 
 import java.util.Properties;
 
+import com.google.inject.Injector;
+
 import helsinki.config.ApplicationDomain;
 import helsinki.dbsetup.HibernateSetup;
 import helsinki.filter.NoDataFilter;
 import helsinki.ioc.ApplicationServerModule;
 import helsinki.serialisation.SerialisationClassProvider;
-
-import ua.com.fielden.platform.entity.query.metadata.DomainMetadata;
 import ua.com.fielden.platform.entity.factory.EntityFactory;
 import ua.com.fielden.platform.entity.query.IdOnlyProxiedEntityTypeCache;
+import ua.com.fielden.platform.entity.query.metadata.DomainMetadata;
 import ua.com.fielden.platform.ioc.ApplicationInjectorFactory;
 import ua.com.fielden.platform.ioc.NewUserNotifierMockBindingModule;
 import ua.com.fielden.platform.security.NoAuthorisation;
 import ua.com.fielden.platform.test.DbDrivenTestCase;
 import ua.com.fielden.platform.test.IDomainDrivenTestCaseConfiguration;
-
-import com.google.inject.Injector;
+import ua.com.fielden.platform.utils.DefaultDates;
+import ua.com.fielden.platform.utils.DefaultUniversalConstants;
 
 /**
  * Provides Helsinki Airport Asset Management specific implementation of {@link IDomainDrivenTestCaseConfiguration} to be used for creation and population of the target development database from within of IDE.
@@ -55,6 +56,8 @@ public final class DataPopulationConfig implements IDomainDrivenTestCaseConfigur
     	            SerialisationClassProvider.class, 
                     NoDataFilter.class,
                     NoAuthorisation.class, 
+                    DefaultUniversalConstants.class,
+                    DefaultDates.class,
     	            props);
     	    injector = new ApplicationInjectorFactory()
     	            .add(module)
diff --git a/airport/airport-web-server/src/main/java/helsinki/ioc/WebApplicationServerModule.java b/airport/airport-web-server/src/main/java/helsinki/ioc/WebApplicationServerModule.java
index cd26a32..3c908dc 100644
--- a/airport/airport-web-server/src/main/java/helsinki/ioc/WebApplicationServerModule.java
+++ b/airport/airport-web-server/src/main/java/helsinki/ioc/WebApplicationServerModule.java
@@ -14,6 +14,8 @@ import ua.com.fielden.platform.entity.AbstractEntity;
 import ua.com.fielden.platform.entity.query.IFilter;
 import ua.com.fielden.platform.security.ServerAuthorisationModel;
 import ua.com.fielden.platform.serialisation.api.ISerialisationClassProvider;
+import ua.com.fielden.platform.utils.DefaultDates;
+import ua.com.fielden.platform.utils.DefaultUniversalConstants;
 import ua.com.fielden.platform.web.ioc.IBasicWebApplicationServerModule;
 
 /**
@@ -36,7 +38,7 @@ public class WebApplicationServerModule extends ApplicationServerModule implemen
             final Class<? extends ISerialisationClassProvider> serialisationClassProviderType,
             final Class<? extends IFilter> automaticDataFilterType,
             final Properties props) throws Exception {
-        super(defaultHibernateTypes, applicationDomainProvider, domainTypes, serialisationClassProviderType, automaticDataFilterType, ServerAuthorisationModel.class, props);
+        super(defaultHibernateTypes, applicationDomainProvider, domainTypes, serialisationClassProviderType, automaticDataFilterType, ServerAuthorisationModel.class, DefaultUniversalConstants.class, DefaultDates.class, props);
         this.domainName = props.getProperty("web.domain");
         this.port = Integer.valueOf(props.getProperty("port"));
         this.path = props.getProperty("web.path");
-- 
2.29.2

